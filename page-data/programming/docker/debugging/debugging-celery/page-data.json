{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/programming/docker/debugging/debugging-celery","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Debugging Celery\"), mdx(\"p\", null, \"Related to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../python/debugging/debugging-python\",\n    \"title\": \"debugging-python\"\n  }, \"[[debugging-python]]\"), \".\"), mdx(\"p\", null, \"Debugging dockerized celery services is not as straightforward as debugging\\nsimple python services. One issue is that the normal \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"breakpoint()\"), \" doesn't work\\nfor celery. The other issue is that celery doesn't come with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auto-reload\"), \"\\nfeature, the same way frameworks like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flask\"), \" do.\"), mdx(\"p\", null, \"So, we need to do a couple of things to make debugging celery docker services\\neasier:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use celery's own remote debugger.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"open up the ports the debugger generally listens to\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use an external hot reloading tool\")), mdx(\"h2\", null, \"Changes to docker-compose.yml\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"yaml\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-yaml\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token key atrule\"\n  }, \"stdin_open\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token boolean important\"\n  }, \"true\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token key atrule\"\n  }, \"tty\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token boolean important\"\n  }, \"true\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token key atrule\"\n  }, \"ports\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \"\\n\\t\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"-\"), \" 6900\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"-\"), \"7000\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \"6900\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"7000\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token key atrule\"\n  }, \"environment\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \"\\n\\t\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"-\"), \" CELERY_RDB_HOST=0.0.0.0. \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# to be able to telnet from outside the container\"), \"\\n\\t\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"-\"), \" PYTHONUNBUFFERED=1       \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# any non-empty string will do\")))), mdx(\"h2\", null, \"Hot reloading celery\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"pip install watchdog\"))), mdx(\"p\", null, \"Instead of running celery directly like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"celery worker --app=...\"), \", run it\\nindirectly using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"watchmedo\"), \":\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"watchmedo auto-restart --directory\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \"./ --pattern\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \"*.py --recursive -- celery \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"\\\\\"), \"\\nworker --app\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"..\"), \".\"))), mdx(\"p\", null, \"More \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.distributedpython.com/2019/04/23/celery-reload/\"\n  }, \"\\nhere\"), \".\"), mdx(\"h2\", null, \"Add breakpoints in code\"), mdx(\"p\", null, \"Add a breakpoint using:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"python\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-python\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"from\"), \" celery\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"contrib \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"import\"), \" rdb\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# SOME PYTHON CODE\"), \"\\nrdb\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"set_trace\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# SOME MORE PYTHON CODE\")))), mdx(\"p\", null, \"More \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.celeryproject.org/en/stable/reference/celery.contrib.rdb.html\"\n  }, \"\\nhere\"), \".\"), mdx(\"h2\", null, \"Running containers\"), mdx(\"p\", null, \"Unfortunately, celery's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rdb\"), \" doesn't work with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose up\"), \". There seems\\nto be an issue with the way service ports are exposed via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"up\"), \". More on that\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/docker/compose/issues/4677\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"Run the service using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose run\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker-compose run --service-ports celery\"))), mdx(\"h2\", null, \"Using the debugger\"), mdx(\"p\", null, \"Invoke breakpoint. On invocation, remote debugger will take over: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Remote\\ndebugger:<PORT>: Ready to connect: telnet 0.0.0.0 <PORT>\"), \". It's important that\\nthe debugger is listening on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0.0.0.0\"), \" as it will enable us to connect to it\\nfrom outside the container.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"telnet localhost \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"<\"), \"PORT\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \">\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[{"contextLine":"Related to [[debugging-python]].","targetAnchor":null,"refWord":"debugging-python","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Debugging Python\"), mdx(\"h2\", null, \"Modules\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"pdb\",\n    \"title\": \"pdb\"\n  }, \"[[pdb]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"pdbpp\",\n    \"title\": \"pdbpp\"\n  }, \"[[pdbpp]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"rich\",\n    \"title\": \"rich\"\n  }, \"[[rich]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"b31bab32-cb39-5eda-b819-da615aa83d4a","fields":{"slug":"/programming/python/debugging/debugging-python","title":"Debugging Python"}}}}],"inboundReferences":[{"contextLine":"- [[debugging-celery]]","referrer":{"parent":{"id":"1630f171-623b-569f-9efc-97f4128842f9","fields":{"slug":"/programming/docker/debugging/debugging-docker","title":"Debugging Docker"}}}}]},"fields":{"slug":"/programming/docker/debugging/debugging-celery","title":"Debugging Celery"}}},"pageContext":{"id":"71f8ed51-b318-519c-b1e4-86f0ebc20081","refWordMdxSlugDict":{"debugging-python":"programming/python/debugging/debugging-python","pdb":"programming/python/debugging/pdb","pdbpp":"programming/python/debugging/pdbpp","debugging-docker":"programming/docker/debugging/debugging-docker","debugging-celery":"programming/docker/debugging/debugging-celery","rich":"programming/python/debugging/rich"}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}