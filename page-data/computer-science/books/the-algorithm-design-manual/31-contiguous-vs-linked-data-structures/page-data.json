{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/computer-science/books/the-algorithm-design-manual/31-contiguous-vs-linked-data-structures","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"3.1: Contiguous vs Linked Data Structures\"), mdx(\"h2\", null, \"Linked lists vs static arrays\"), mdx(\"p\", null, \"The relative advantages of linked lists over static arrays include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Overflow on linked structures can never occur unless the memory is actually full.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Insertions and deletions are simpler than for contiguous (array) lists.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"With large records, moving pointers is easier and faster than moving the\\nitems themselves.\")), mdx(\"p\", null, \"while the relative advantages of arrays include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linked structures require extra space for storing pointer fields.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linked lists do not allow efficient random access to items.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arrays allow better memory locality and cache performance than random pointer jumping.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[31-contiguous-vs-linked-data-structures]]","referrer":{"parent":{"id":"2e021746-1df2-566c-9cce-c2130c882639","fields":{"slug":"/computer-science/books/the-algorithm-design-manual/the-algorithm-design-manual","title":"The Algorithm Design Manual"}}}}]},"fields":{"slug":"/computer-science/books/the-algorithm-design-manual/31-contiguous-vs-linked-data-structures","title":"3.1: Contiguous vs Linked Data Structures"}}},"pageContext":{"id":"276a67a0-3564-5809-94f5-9d5824ec3a6a","refWordMdxSlugDict":{}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}