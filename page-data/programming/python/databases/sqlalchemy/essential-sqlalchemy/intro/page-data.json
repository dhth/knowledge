{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/programming/python/databases/sqlalchemy/essential-sqlalchemy/intro","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Intro\"), mdx(\"h2\", null, \"SQLAlchemy Core VS ORM\"), mdx(\"p\", null, \"The two modes use slightly different syntax, but the biggest difference between\\nCore and ORM is the view of data as schema or business objects. SQLAlchemy Core\\nhas a schema-centric view, which like traditional SQL is focused around tables,\\nkeys, and index structures, making it a good contender for applications like\\ndata warehousing, reporting, etc.\"), mdx(\"p\", null, \"ORM is much more suited for domain-driven design.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[intro]]","referrer":{"parent":{"id":"16cf6a86-e5d8-54a5-a0a2-6b176a988b48","fields":{"slug":"/programming/python/databases/sqlalchemy/essential-sqlalchemy/essential-sqlalchemy","title":"Essential SQLAlchemy"}}}}]},"fields":{"slug":"/programming/python/databases/sqlalchemy/essential-sqlalchemy/intro","title":"Intro"}}},"pageContext":{"id":"3c409b48-f359-58eb-955c-9d16047a2362","refWordMdxSlugDict":{}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}