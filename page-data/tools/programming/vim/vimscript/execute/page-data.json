{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/tools/programming/vim/vimscript/execute","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Execute\"), mdx(\"h2\", null, \"Usage\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"execute\"), \" in conjuction with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"normal!\"), \" let's us escape special characters.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \":execute \\\"normal! mqA;\\\\<esc>`q\\\"\"))), mdx(\"p\", null, \"Breakdown:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":execute \\\"normal! ...\\\"\"), \": run the sequence of commands as if they were\\nentered in normal mode, ignoring all mappings, and replacing string escape\\nsequences with their results.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mq\"), \": store the current location in mark \\\"q\\\".  \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \": move to the end of the\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"current line and enter insert mode after the last\\ncharacter.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \";\"), \": we're now in insert mode, so just put a literal semicolon in the file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\\<esc>\"), \": this is a string escape sequence which resolves to a press of the\\nescape key, which takes us out of insert mode.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"`\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"q\"), \": return to the exact location of mark \\\"q\\\".\")), mdx(\"h2\", null, \"Regex in commands\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \":execute \\\"normal! gg\\\" . '/for .\\\\+ in .\\\\+:' . \\\"\\\\<cr>\\\"\"))), mdx(\"p\", null, \"The middle component will be treated as a literal string, so we don't need to\\nescape \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".\\\\+\"), \".\"), mdx(\"h2\", null, \"Very Magic\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \":execute \\\"normal! gg\\\" . '/\\\\vfor .+ in .+:' . \\\"\\\\<cr>\\\"\"))), mdx(\"p\", null, \"This tells Vim to use its \\\"very magic\\\" regex parsing mode, which is pretty much\\nthe same as you're used to in any other programming language.\"), mdx(\"h2\", null, \"Escaping characters\"), mdx(\"p\", null, \"If the cursor is on the word \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"don't\"), \":\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \":echom expand(\\\"<cWORD>\\\")\\n\\\" will output don't\"))), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \":echom shellescape(expand(\\\"<cWORD>\\\"))\\n\\\" will output 'don'\\\\''t'\"))), mdx(\"p\", null, \"More \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learnvimscriptthehardway.stevelosh.com/chapters/32.html\"\n  }, \"\\nhere\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[execute]]","referrer":{"parent":{"id":"2e699bf5-7d8e-55a2-8b74-60d392d5e9e1","fields":{"slug":"/tools/programming/vim/vimscript/vimscript","title":"VimScript"}}}}]},"fields":{"slug":"/tools/programming/vim/vimscript/execute","title":"Execute"}}},"pageContext":{"id":"957cd229-fd2d-5c78-83be-84027ccd8863","refWordMdxSlugDict":{}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}