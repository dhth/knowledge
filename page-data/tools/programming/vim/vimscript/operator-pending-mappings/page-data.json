{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/tools/programming/vim/vimscript/operator-pending-mappings","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Operator Pending Mappings\"), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://learnvimscriptthehardway.stevelosh.com/chapters/15.html\"\n  }, \"Book\"))), mdx(\"h2\", null, \"Simple operator mapping\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"d\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" are operators that wait for a movement command (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"w\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i(\"), \", etc.).\\nVim lets you create new movements.\"), mdx(\"p\", null, \"Here's a sweet mapping to directly operator on the contents of the next braces.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \":onoremap in( :<c-u>normal! f(vi(<cr>\"))), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"python\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-python\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"def\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"somefunc\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"param1\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" param2\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\")))), mdx(\"p\", null, \"When the cursor is somewhere before the braces, running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cin()\"), \" will clear out\\nthe contents of the braces.\"), mdx(\"p\", null, \"Structural breakdown of the mapping:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Component\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"in(\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"new movement\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"<c-u>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"normal!\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"execute normal mode commands\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"f(\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"find next \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"vi(\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"visual selection\")))), mdx(\"h2\", null, \"Operator mapping using \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"execute\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"normal!\"), \" doesn't recognize \\\"special characters\\\" like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<cr>\"), \". There are a number\\nof ways around this, but the easiest to use and read is execute.\"), mdx(\"p\", null, \"The execute command is used to evaluate a string as if it were a Vimscript\\ncommand.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \":onoremap ih :<c-u>execute \\\"normal! ?^==\\\\\\\\+$\\\\r:nohlsearch\\\\rkvg_\\\"<cr>\"))), mdx(\"p\", null, \"When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"execute\"), \" looks at the string you tell it to run, it will substitute any\\nspecial characters it finds before running it. In this case, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\\r\"), \" is an escape\\nsequence that means \\\"carriage return\\\". The double backslash is also an escape\\nsequence that puts a literal backslash in the string.\"), mdx(\"p\", null, \"So, the above command can be seen as:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \":normal! ?^==\\\\+$<cr>:nohlsearch<cr>kvg_\\n                ^^^^           ^^^^\\n                 ||             ||\\nThese are ACTUAL carriage returns, NOT the four characters\\n\\\"left angle bracket\\\", \\\"c\\\", \\\"r\\\", and \\\"right angle bracket\\\".\"))), mdx(\"p\", null, \"which can be further broken down as:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"?^==\\\\+$     \\\" search backwards for a line containing == or more\\n:nohlsearch \\\" no visual highlight\\nkvg_        \\\" up one line, highlight to last non-blank character\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[operator-pending-mappings]]","referrer":{"parent":{"id":"2e699bf5-7d8e-55a2-8b74-60d392d5e9e1","fields":{"slug":"/tools/programming/vim/vimscript/vimscript","title":"VimScript"}}}}]},"fields":{"slug":"/tools/programming/vim/vimscript/operator-pending-mappings","title":"Operator Pending Mappings"}}},"pageContext":{"id":"b346b32a-ed92-5539-b29e-867812480f72","refWordMdxSlugDict":{}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}