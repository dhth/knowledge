{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/computer-science/courses/cs61c-machine-structures/lec-1-intro","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Lec 1: Intro\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What is hardware and how does it magically run software?\")), mdx(\"h2\", null, \"Great Ideas in Computer Architecture\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Abstraction\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Moore's law\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Principle of locality\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Parallelism\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Performance Measurement and Improvement\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dependability via Redundancy\")), mdx(\"h2\", null, \"Abstraction\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/knowledge/72676a1ad8743e57169929fdf7e5b37a/abstraction.png\",\n    \"alt\": \"Abstraction\"\n  })), mdx(\"h2\", null, \"Principle of Locality\"), mdx(\"p\", null, \"Accessing data from memory is very slow compared to accessing it from registers\\nor on chip cache. \"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/knowledge/af5e023b7089f2e7b80ab01404f3416a/latency.png\",\n    \"alt\": \"Latency\"\n  })), mdx(\"p\", null, \"Given that most of the memory we use is the slower (and cheaper) kind, we can\\nstill make things work due to the principle of locality.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/knowledge/a1e6365bea8c007cf7535891cd3d7721/locality.png\",\n    \"alt\": \"Locality\"\n  })), mdx(\"p\", null, \"Here's what this principle entails:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"People don't write programs that randomly touch different kinds of memory\\n(seen above). Instead, we make use of the fact that if we touch a piece of\\ndata once, it's pretty likely that we'll touch it again in the near future. We\\ncache this piece of data, making subsequent reads fast.\")), mdx(\"h2\", null, \"Number Representation\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Inside computers, everything is a number.\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/knowledge/1d56a43be6540e031d829e1e10a2ecb0/numbers_0.png\",\n    \"alt\": \"Numbers\"\n  })), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/knowledge/f943e2cbf02bbc1d2af443f4edfbd987/numbers.png\",\n    \"alt\": \"Numbers\"\n  })), mdx(\"h2\", null, \"Signed and Unsigned Integers\"), mdx(\"p\", null, \"Unsigned integers are used for addresses.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/knowledge/557d2a6b9aef0a0db7995c063c09759a/unsigned.png\",\n    \"alt\": \"Image\"\n  })), mdx(\"h2\", null, \"Two's Complement Integers\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/knowledge/f93f56426b5b4eb299f0e8f474e5f558/twos_complement.png\",\n    \"alt\": \"Image\"\n  })), mdx(\"p\", null, \"How to make two's complement: Invert all bits and add 1 (computers actually do\\nit like this).\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/knowledge/80234b9ce07f78e601ebd36c55d236d5/complement.png\",\n    \"alt\": \"Image\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[lec-1-intro]]","referrer":{"parent":{"id":"d06e3625-88e7-50c0-aa5f-d2ba62d841eb","fields":{"slug":"/computer-science/courses/cs61c-machine-structures/cs61c-machine-structures","title":"CS61C Machine Structures"}}}}]},"fields":{"slug":"/computer-science/courses/cs61c-machine-structures/lec-1-intro","title":"Lec 1: Intro"}}},"pageContext":{"id":"9c2542d7-350a-5a8d-b51d-cf870813b94b","refWordMdxSlugDict":{}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}