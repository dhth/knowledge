{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/programming/python/databases/databases","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Databases with Python\"), mdx(\"h2\", null, \"Modules\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"alembic\",\n    \"title\": \"alembic\"\n  }, \"[[alembic]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"sqlalchemy/sqlalchemy\",\n    \"title\": \"sqlalchemy\"\n  }, \"[[sqlalchemy]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[{"contextLine":"- [[alembic]]","targetAnchor":null,"refWord":"alembic","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Alembic\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# a new column, model, etc. has been added before\"), \"\\nalembic revision --autogenerate -m \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'<describe your changes>'\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# review the migration in backend/feedback/alembic/versions\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# upgrade to the latest version\"), \"\\nalembic upgrade \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"head\")))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Make it a point to downgrade and upgrade whenever a change has a migration, to make sure nothing breaks.\")), mdx(\"h2\", null, \"Field length changes\"), mdx(\"p\", null, \"Alembic doesn't detect field length changes by default, it's configuration has to be modified to detect it.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://blog.code4hire.com/2017/06/setting-up-alembic-to-detect-the-column-length-change/\"\n  }, \"Setting up alembic to detect the column length change\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://eshlox.net/2017/08/06/alembic-migration-for-string-length-change\"\n  }, \"Alembic - migration for String length change\")), mdx(\"h2\", null, \"Warning\"), mdx(\"p\", null, \"Alembic can make errors when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"context.configure(url=url, target_metadata=target_metadata, literal_binds=True, compare_type=True)\")), mdx(\"p\", null, \"when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compare_type\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"212a6fea-cf40-5f9d-9e6b-fe75da9be6bb","fields":{"slug":"/programming/python/databases/alembic","title":"Alembic"}}}},{"contextLine":"- [[sqlalchemy]]","targetAnchor":null,"refWord":"sqlalchemy","target":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"SQLAlchemy\"), mdx(\"h2\", null, \"Modules\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"essential-sqlalchemy/essential-sqlalchemy\",\n    \"title\": \"essential-sqlalchemy\"\n  }, \"[[essential-sqlalchemy]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"sqlalchemy-wiki\",\n    \"title\": \"sqlalchemy-wiki\"\n  }, \"[[sqlalchemy-wiki]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"be462a4f-0425-5048-9f8d-62288fce4be4","fields":{"slug":"/programming/python/databases/sqlalchemy/sqlalchemy","title":"SQLAlchemy"}}}}],"inboundReferences":[{"contextLine":"- [[databases]]","referrer":{"parent":{"id":"3cd28663-7c80-514d-b187-26b4d95de327","fields":{"slug":"/programming/python/python","title":"Python"}}}}]},"fields":{"slug":"/programming/python/databases/databases","title":"Databases with Python"}}},"pageContext":{"id":"daf34027-2dbe-56df-b0fe-59415636c580","refWordMdxSlugDict":{"alembic":"programming/python/databases/alembic","sqlalchemy":"programming/python/databases/sqlalchemy/sqlalchemy","essential-sqlalchemy":"programming/python/databases/sqlalchemy/essential-sqlalchemy/essential-sqlalchemy","intro":"programming/python/databases/sqlalchemy/essential-sqlalchemy/intro","working-with-data-via-sqlalchemy-core":"programming/python/databases/sqlalchemy/essential-sqlalchemy/working-with-data-via-sqlalchemy-core","sqlalchemy-wiki":"programming/python/databases/sqlalchemy/sqlalchemy-wiki"}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}