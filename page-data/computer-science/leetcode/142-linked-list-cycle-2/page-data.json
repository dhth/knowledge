{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/computer-science/leetcode/142-linked-list-cycle-2","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"142: Linked List Cycle 2\"), mdx(\"p\", null, \"Cleverly builds upon the problem of simply detecting if a loop exists or not.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/knowledge/7e09ddd24b0a1f0fc1b6782a381230d4/142-linked-list-cycle-2.jpg\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"If we start two pointers at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"head\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"meetingPoint\"), \", they'll meet after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \"\\niterations, and that's the node where the cycle begins.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"outboundReferences":[],"inboundReferences":[{"contextLine":"- [[142-linked-list-cycle-2]]","referrer":{"parent":{"id":"c9f93050-6529-58eb-bc73-4d480c6fbe02","fields":{"slug":"/computer-science/leetcode/leetcode","title":"Leetcode"}}}}]},"fields":{"slug":"/computer-science/leetcode/142-linked-list-cycle-2","title":"142: Linked List Cycle 2"}}},"pageContext":{"id":"850eef6c-8056-5973-9f5e-679079bf55f4","refWordMdxSlugDict":{}}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}